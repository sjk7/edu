
// eventapp.c : how to make a simple application with an event loop
#include <iostream>
#include <stdio.h>
#include <cstdint>
#include <assert.h>
#include <thread>
#include <chrono>
#include <queue>

using namespace std;

void sleep (uint32_t ms){
	std::this_thread::sleep_for(std::chrono::milliseconds(ms));
}
auto ms_epoch() ->decltype(std::chrono::duration) {
	auto ms =
		std::chrono::duration_cast<std::chrono::milliseconds>
		(std::chrono::system_clock::now().time_since_epoch()).count();
	return ms;
}

namespace ev
{
	static constexpr int MSG_EXIT = INT_MIN;
	static constexpr int MSG_BASE = 1000;
	static constexpr int MSG_START = MSG_BASE;
	static constexpr int MSG_IDLE = MSG_BASE + 1;
}

struct eventcb { 
	struct msg_t {
		int msg;
		intptr_t wparam;
		intptr_t lparam;
		uint64_t flags;
		void* udata;
		msg_t() : msg(0), wparam(0), lparam(0), flags(0), udata(nullptr) {}
	};

	virtual int on_app_idle() = 0;
	virtual int on_app_start() = 0;
	virtual int on_app_exit() = 0;

	virtual int send_message(msg_t& msg) { return on_msg(msg); }
	
	virtual int post_message(msg_t& msg) {
		m_q.push(msg); 
		return (int)m_q.size();
	}
	
	
	virtual int on_msg(msg_t& m) {
		switch (m.msg) {
		case ev::MSG_START: 
			m.msg = ev::MSG_IDLE;
			return on_app_start();

		case ev::MSG_IDLE: {
			if (!m_q.empty()) {
				auto m = m_q.front();
				m_q.pop();
				return on_msg(m);
			}
			return on_app_idle();
		}
		case ev::MSG_EXIT:
			return on_app_exit();
		default:
			return 0;

		}

		return 0;
	}

private:
	std::queue<msg_t> m_q;
	
};


struct eventappcore
{
	eventappcore() {}
	int start(eventcb& cb) {
		eventcb::msg_t m;
		m.msg = ev::MSG_START;
		return cb.on_msg(m);
	}

private:
	eventappcore(const eventappcore& other) = delete;
	eventappcore& operator=(eventappcore& other) = delete;

};

struct eventapp : public eventappcore, public eventcb
{};

// myactual program
struct app : public eventapp
{
	

	virtual int on_msg(eventcb::msg_t& msg) {
		
		int rc = 0;

		while (rc = eventcb::on_msg(msg) > ev::MSG_EXIT)
		{
			static int tested_q = 0;
			if (msg.msg != ev::MSG_IDLE) {
				cout << "Msg has code: " << msg.msg << endl;
				return 1;
			}
			else {
				if (!tested_q) {
					tested_q = 1;
					msg_t m;
					for (int i = 1; i < 10; ++i) {
						m.msg = i;
						cout << "Sending message: " << i << endl;
						int sm = send_message(m);
						cout << "send_message returned: " << sm << endl;
					}
					cout << "------------------------------------------------" << endl << endl;
					for (int i = 1; i < 10; ++i) {
						m.msg = i;
						cout << "Posting message: " << i << endl;
						int sm = post_message(m);
						cout << "post_message returned: " << sm << endl;
					}
				}
			}
		};

		return 0;
	}

	virtual int on_app_idle() {
		cout << "app idle" << endl;
		sleep(1000);
		return 1;
	}

	virtual int on_app_start() {
		cout << "app start" << endl;
		return 1;
	}
	virtual int on_app_exit()  {
		cout << "app exit" << endl;
		return 1;
	}

};


int main()
{

	app the_app;
	the_app.start(the_app);
	return 0;
}
